<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace App\EventSubscriber;

use App\Entity\User;
use Doctrine\ORM\Events;
use Doctrine\Persistence\Event\LifecycleEventArgs;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\PasswordHasher\Hasher\UserPasswordHasherInterface;

class UserSubscriber implements EventSubscriberInterface
{
    private UserPasswordHasherInterface $passwordHasher;

    public function __construct(UserPasswordHasherInterface $passwordHasher)
    {
        $this->passwordHasher = $passwordHasher;
    }
    
    public function prePersist(LifecycleEventArgs $args): void
    {
        // On récupère l'objet qui doit être persisté
        $entity = $args->getObject();

        // Si l'intance concernée est de type User
        if ($entity instanceof User) {
            // On procède au hashage du password envoyé en clair
            $entity->setPassword(
                $this->passwordHasher->hashPassword(
                    $entity,
                    $entity->getPassword()
                )
            );
        }
    }

    public static function getSubscribedEvents(): array
    {
        return [
            //'prePersist' => 'onPrePersist',
            Events::prePersist
        ];
    }
}
